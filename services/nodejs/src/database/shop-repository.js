/**
 * Â∫óÈì∫Êï∞ÊçÆËÆøÈóÆÂ±Ç
 * Ë¥üË¥£Â∫óÈì∫Áõ∏ÂÖ≥ÁöÑÊâÄÊúâÊï∞ÊçÆÂ∫ìÊìç‰Ωú
 */
const DatabaseCore = require('./database-core');

class ShopRepository {
    constructor(databaseCore) {
        this.db = databaseCore;
    }

    /**
     * ÂàùÂßãÂåñÂ∫óÈì∫Áõ∏ÂÖ≥Ë°®
     */
    async initializeTables() {
        // ÂàõÂª∫Â∫óÈì∫Ë°®
        await this.db.createTableIfNotExists('shops', `
            id TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            domain TEXT NOT NULL,
            api_key TEXT UNIQUE,
            owner_username TEXT,
            owner_password TEXT,
            owner_email TEXT,
            status TEXT DEFAULT 'active',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            last_used_at DATETIME,
            settings TEXT DEFAULT '{}'
        `);

        // ÂàõÂª∫Â∫óÈì∫‰ΩøÁî®ÁªüËÆ°Ë°®
        await this.db.createTableIfNotExists('shop_usage_stats', `
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            shop_id TEXT NOT NULL,
            date DATE NOT NULL,
            total_requests INTEGER DEFAULT 0,
            total_messages INTEGER DEFAULT 0,
            unique_visitors INTEGER DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (shop_id) REFERENCES shops(id),
            UNIQUE(shop_id, date)
        `);

        // ÂàõÂª∫Á¥¢Âºï
        await this.db.createIndexIfNotExists('idx_shops_api_key', 'shops', 'api_key');
        await this.db.createIndexIfNotExists('idx_shops_domain', 'shops', 'domain');
        await this.db.createIndexIfNotExists('idx_shops_status', 'shops', 'status');
        await this.db.createIndexIfNotExists('idx_shop_usage_shop_id', 'shop_usage_stats', 'shop_id');
        await this.db.createIndexIfNotExists('idx_shop_usage_date', 'shop_usage_stats', 'date');

        console.log('‚úÖ Â∫óÈì∫Áõ∏ÂÖ≥Ë°®ÂàùÂßãÂåñÂÆåÊàê');
    }

    /**
     * ÂàõÂª∫Êñ∞Â∫óÈì∫
     */
    async createShop(shopData) {
        const {
            id,
            name,
            domain,
            api_key,
            owner_username,
            owner_password,
            owner_email,
            settings = '{}'
        } = shopData;

        const sql = `
            INSERT INTO shops (
                id, name, domain, api_key, owner_username, 
                owner_password, owner_email, settings
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `;

        const result = await this.db.run(sql, [
            id, name, domain, api_key, owner_username,
            owner_password, owner_email, JSON.stringify(settings)
        ]);

        console.log(`üè™ Êñ∞Â∫óÈì∫ÂàõÂª∫ÊàêÂäü: ${name} (${id})`);
        return result;
    }

    /**
     * Ê†πÊçÆIDËé∑ÂèñÂ∫óÈì∫
     */
    async getShopById(shopId) {
        const sql = 'SELECT * FROM shops WHERE id = ?';
        const shop = await this.db.get(sql, [shopId]);
        
        if (shop && shop.settings) {
            shop.settings = JSON.parse(shop.settings);
        }
        
        return shop;
    }

    /**
     * Ê†πÊçÆAPIÂØÜÈí•Ëé∑ÂèñÂ∫óÈì∫
     */
    async getShopByApiKey(apiKey) {
        const sql = 'SELECT * FROM shops WHERE api_key = ?';
        const shop = await this.db.get(sql, [apiKey]);
        
        if (shop && shop.settings) {
            shop.settings = JSON.parse(shop.settings);
        }
        
        return shop;
    }

    /**
     * Ê†πÊçÆÂüüÂêçËé∑ÂèñÂ∫óÈì∫
     */
    async getShopByDomain(domain) {
        const sql = 'SELECT * FROM shops WHERE domain = ?';
        const shop = await this.db.get(sql, [domain]);
        
        if (shop && shop.settings) {
            shop.settings = JSON.parse(shop.settings);
        }
        
        return shop;
    }

    /**
     * Ëé∑ÂèñÊâÄÊúâÂ∫óÈì∫
     */
    async getAllShops() {
        const sql = 'SELECT * FROM shops ORDER BY created_at DESC';
        const shops = await this.db.query(sql);
        
        return shops.map(shop => {
            if (shop.settings) {
                shop.settings = JSON.parse(shop.settings);
            }
            return shop;
        });
    }

    /**
     * Ëé∑ÂèñÊ¥ªË∑ÉÂ∫óÈì∫
     */
    async getActiveShops() {
        const sql = 'SELECT * FROM shops WHERE status = ? ORDER BY last_used_at DESC';
        const shops = await this.db.query(sql, ['active']);
        
        return shops.map(shop => {
            if (shop.settings) {
                shop.settings = JSON.parse(shop.settings);
            }
            return shop;
        });
    }

    /**
     * Êõ¥Êñ∞Â∫óÈì∫APIÂØÜÈí•
     */
    async updateApiKey(shopId, newApiKey) {
        const sql = `
            UPDATE shops 
            SET api_key = ?, updated_at = CURRENT_TIMESTAMP 
            WHERE id = ?
        `;
        
        const result = await this.db.run(sql, [newApiKey, shopId]);
        console.log(`üîë Â∫óÈì∫ ${shopId} APIÂØÜÈí•Â∑≤Êõ¥Êñ∞`);
        return result;
    }

    /**
     * Êõ¥Êñ∞Â∫óÈì∫ÂüüÂêç
     */
    async updateDomain(shopId, newDomain) {
        const sql = `
            UPDATE shops 
            SET domain = ?, updated_at = CURRENT_TIMESTAMP 
            WHERE id = ?
        `;
        
        const result = await this.db.run(sql, [newDomain, shopId]);
        console.log(`üåê Â∫óÈì∫ ${shopId} ÂüüÂêçÂ∑≤Êõ¥Êñ∞‰∏∫: ${newDomain}`);
        return result;
    }

    /**
     * Êõ¥Êñ∞Â∫óÈì∫‰ø°ÊÅØ
     */
    async updateShop(shopId, updateData) {
        const allowedFields = ['name', 'domain', 'owner_email', 'status', 'settings'];
        const updates = [];
        const values = [];

        for (const [key, value] of Object.entries(updateData)) {
            if (allowedFields.includes(key)) {
                updates.push(`${key} = ?`);
                values.push(key === 'settings' ? JSON.stringify(value) : value);
            }
        }

        if (updates.length === 0) {
            throw new Error('Ê≤°ÊúâÊúâÊïàÁöÑÊõ¥Êñ∞Â≠óÊÆµ');
        }

        updates.push('updated_at = CURRENT_TIMESTAMP');
        values.push(shopId);

        const sql = `UPDATE shops SET ${updates.join(', ')} WHERE id = ?`;
        const result = await this.db.run(sql, values);
        
        console.log(`üè™ Â∫óÈì∫ ${shopId} ‰ø°ÊÅØÂ∑≤Êõ¥Êñ∞`);
        return result;
    }

    /**
     * Êõ¥Êñ∞Â∫óÈì∫ÊúÄÂêé‰ΩøÁî®Êó∂Èó¥
     */
    async updateLastUsed(shopId) {
        // ÂÖºÂÆπÁé∞ÊúâË°®ÁªìÊûÑÔºå‰ΩøÁî®updated_atÂ≠óÊÆµËÄå‰∏çÊòØlast_used_at
        const sql = `
            UPDATE shops 
            SET updated_at = CURRENT_TIMESTAMP 
            WHERE id = ?
        `;
        
        await this.db.run(sql, [shopId]);
    }

    /**
     * Âà†Èô§Â∫óÈì∫
     */
    async deleteShop(shopId) {
        const sql = 'DELETE FROM shops WHERE id = ?';
        const result = await this.db.run(sql, [shopId]);
        
        console.log(`üóëÔ∏è Â∫óÈì∫ ${shopId} Â∑≤Âà†Èô§`);
        return result;
    }

    /**
     * Ê£ÄÊü•Â∫óÈì∫ÊòØÂê¶Â≠òÂú®
     */
    async shopExists(shopId) {
        const sql = 'SELECT 1 FROM shops WHERE id = ?';
        const result = await this.db.get(sql, [shopId]);
        return !!result;
    }

    /**
     * Ê£ÄÊü•APIÂØÜÈí•ÊòØÂê¶Â≠òÂú®
     */
    async apiKeyExists(apiKey) {
        const sql = 'SELECT 1 FROM shops WHERE api_key = ?';
        const result = await this.db.get(sql, [apiKey]);
        return !!result;
    }

    /**
     * Ê£ÄÊü•ÂüüÂêçÊòØÂê¶Â∑≤Ë¢´‰ΩøÁî®
     */
    async domainExists(domain) {
        const sql = 'SELECT 1 FROM shops WHERE domain = ?';
        const result = await this.db.get(sql, [domain]);
        return !!result;
    }

    /**
     * ËÆ∞ÂΩïÂ∫óÈì∫‰ΩøÁî®ÁªüËÆ°
     */
    async recordUsageStats(shopId, statsData = {}) {
        const today = new Date().toISOString().split('T')[0];
        const {
            requests = 1,
            messages = 0,
            uniqueVisitors = 0
        } = statsData;

        const sql = `
            INSERT INTO shop_usage_stats (shop_id, date, total_requests, total_messages, unique_visitors)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(shop_id, date) DO UPDATE SET
                total_requests = total_requests + ?,
                total_messages = total_messages + ?,
                unique_visitors = CASE WHEN ? > 0 THEN unique_visitors + ? ELSE unique_visitors END
        `;

        await this.db.run(sql, [
            shopId, today, requests, messages, uniqueVisitors,
            requests, messages, uniqueVisitors, uniqueVisitors
        ]);
    }

    /**
     * Ëé∑ÂèñÂ∫óÈì∫‰ΩøÁî®ÁªüËÆ°
     */
    async getUsageStats(shopId, days = 30) {
        const sql = `
            SELECT 
                date,
                total_requests,
                total_messages,
                unique_visitors
            FROM shop_usage_stats 
            WHERE shop_id = ? 
                AND date >= date('now', '-${days} days')
            ORDER BY date DESC
        `;

        return await this.db.query(sql, [shopId]);
    }

    /**
     * Ëé∑ÂèñÂ∫óÈì∫ÊÄªÁªüËÆ°
     */
    async getTotalStats(shopId) {
        const sql = `
            SELECT 
                COUNT(*) as total_days,
                SUM(total_requests) as total_requests,
                SUM(total_messages) as total_messages,
                SUM(unique_visitors) as total_visitors,
                MAX(date) as last_active_date
            FROM shop_usage_stats 
            WHERE shop_id = ?
        `;

        return await this.db.get(sql, [shopId]);
    }
}

module.exports = ShopRepository;
