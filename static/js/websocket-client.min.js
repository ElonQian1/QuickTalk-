/**
 * 统一WebSocket客户端库 - 压缩版
 * 用于前端页面，替换重复的WebSocket实现
 */
class UnifiedWebSocketClient{constructor(e={}){this.serverUrl=e.serverUrl||this.getDefaultServerUrl(),this.wsUrl=this.serverUrl.replace(/^http/,"ws")+"/ws",this.enableReconnect=!1!==e.reconnect,this.enableHeartbeat=!1!==e.heartbeat,this.maxReconnectAttempts=e.maxReconnectAttempts||5,this.reconnectInterval=e.reconnectInterval||3e3,this.heartbeatInterval=e.heartbeatInterval||3e4,this.isMobile=e.mobile||this.detectMobile(),this.isEmbed=e.embed||!1,this.debug=e.debug||!1,this.ws=null,this.isConnected=!1,this.reconnectCount=0,this.lastPingTime=0,this.heartbeatTimer=null,this.reconnectTimer=null,this.onOpenCallback=null,this.onMessageCallback=null,this.onCloseCallback=null,this.onErrorCallback=null,this.onReconnectCallback=null,this.userId=e.userId||null,this.shopId=e.shopId||null,this.sessionId=e.sessionId||this.generateSessionId(),this.log("🔌 UnifiedWebSocketClient 初始化完成")}async connect(){if(this.isConnected&&this.ws&&this.ws.readyState===WebSocket.OPEN)return void this.log("⚠️ WebSocket已连接，无需重复连接");try{this.log(`🔗 连接WebSocket: ${this.wsUrl}`),this.ws=new WebSocket(this.wsUrl),this.ws.onopen=this.handleOpen.bind(this),this.ws.onmessage=this.handleMessage.bind(this),this.ws.onclose=this.handleClose.bind(this),this.ws.onerror=this.handleError.bind(this)}catch(e){this.log("❌ WebSocket连接失败:",e),this.handleConnectionError(e)}}send(e){if(!this.isConnected||!this.ws||this.ws.readyState!==WebSocket.OPEN)return this.log("⚠️ WebSocket未连接，无法发送消息"),!1;try{const t="string"==typeof e?e:JSON.stringify(e);return this.ws.send(t),this.log("📤 发送消息:",e),!0}catch(e){return this.log("❌ 发送消息失败:",e),!1}}authenticate(){return this.send({type:"auth",userId:this.userId,shopId:this.shopId,sessionId:this.sessionId,clientType:this.getClientType()})}disconnect(){this.enableReconnect=!1,this.heartbeatTimer&&(clearInterval(this.heartbeatTimer),this.heartbeatTimer=null),this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.ws&&(this.ws.close(),this.ws=null),this.isConnected=!1,this.log("🔌 WebSocket连接已断开")}handleOpen(){this.isConnected=!0,this.reconnectCount=0,this.log("✅ WebSocket连接成功"),(this.userId||this.shopId)&&this.authenticate(),this.enableHeartbeat&&this.startHeartbeat(),this.onOpenCallback&&this.onOpenCallback()}handleMessage(e){try{const t=JSON.parse(e.data);if(this.log("📥 收到消息:",t),"pong"===t.type)return void(this.lastPingTime=Date.now());if("auth_success"===t.type)return void this.log("🔐 认证成功");this.onMessageCallback&&this.onMessageCallback(t)}catch(t){this.log("❌ 消息解析失败:",t),this.onMessageCallback&&this.onMessageCallback(e.data)}}handleClose(e){this.isConnected=!1,this.heartbeatTimer&&(clearInterval(this.heartbeatTimer),this.heartbeatTimer=null),this.log(`🔌 WebSocket连接关闭: ${e.code} - ${e.reason||"无原因"}`),this.onCloseCallback&&this.onCloseCallback(e),this.enableReconnect&&this.reconnectCount<this.maxReconnectAttempts&&this.scheduleReconnect()}handleError(e){this.log("❌ WebSocket错误:",e),this.onErrorCallback&&this.onErrorCallback(e)}handleConnectionError(e){this.log("❌ 连接错误:",e),this.enableReconnect&&this.reconnectCount<this.maxReconnectAttempts&&this.scheduleReconnect()}scheduleReconnect(){this.reconnectTimer||(this.reconnectCount++,setTimeout((()=>{this.reconnectTimer=null,this.onReconnectCallback&&this.onReconnectCallback(this.reconnectCount),this.connect()}),this.reconnectInterval*Math.pow(1.5,this.reconnectCount-1)))}startHeartbeat(){this.heartbeatTimer&&clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval((()=>{this.isConnected&&this.ws&&this.ws.readyState===WebSocket.OPEN&&this.send({type:"ping",timestamp:Date.now()})}),this.heartbeatInterval)}onOpen(e){return this.onOpenCallback=e,this}onMessage(e){return this.onMessageCallback=e,this}onClose(e){return this.onCloseCallback=e,this}onError(e){return this.onErrorCallback=e,this}onReconnect(e){return this.onReconnectCallback=e,this}getDefaultServerUrl(){return"undefined"!=typeof window&&window.location?`${window.location.protocol}//${window.location.host}`:"ws://localhost:3030"}detectMobile(){return"undefined"!=typeof window&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}getClientType(){return this.isEmbed?"embed":this.isMobile?"mobile":"desktop"}generateSessionId(){return"session_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}log(...e){this.debug&&console.log("[UnifiedWebSocket]",...e)}getConnectionState(){return{isConnected:this.isConnected,readyState:this.ws?this.ws.readyState:WebSocket.CLOSED,reconnectCount:this.reconnectCount,userId:this.userId,shopId:this.shopId,sessionId:this.sessionId}}}UnifiedWebSocketClient.createDesktop=function(e={}){return new UnifiedWebSocketClient({...e,mobile:!1,embed:!1,debug:e.debug||!0})},UnifiedWebSocketClient.createMobile=function(e={}){return new UnifiedWebSocketClient({...e,mobile:!0,embed:!1,heartbeatInterval:45e3,debug:e.debug||!0})},UnifiedWebSocketClient.createEmbed=function(e={}){return new UnifiedWebSocketClient({...e,embed:!0,debug:e.debug||!1,heartbeatInterval:6e4})},"undefined"!=typeof module&&module.exports?module.exports=UnifiedWebSocketClient:"undefined"!=typeof window&&(window.UnifiedWebSocketClient=UnifiedWebSocketClient);