#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! serde = { version = "1.0", features = ["derive"] }
//! serde_json = "1.0"
//! chrono = { version = "0.4", features = ["serde"] }
//! ```

use std::collections::HashMap;
use std::fs;

/// Ë°®Á§∫Êï∞ÊçÆÂ∫ìÂ≠óÊÆµÁöÑÁªìÊûÑ
#[derive(Debug, Clone)]
struct Field {
    name: String,
    field_type: String,
    nullable: bool,
    primary_key: bool,
    unique: bool,
    default_value: Option<String>,
    foreign_key: Option<(String, String)>, // (table, column)
}

/// Ë°®Á§∫Êï∞ÊçÆÂ∫ìË°®ÁöÑÁªìÊûÑ
#[derive(Debug, Clone)]
struct Table {
    name: String,
    fields: Vec<Field>,
    indexes: Vec<String>,
    triggers: Vec<String>,
}

/// SchemaÁîüÊàêÂô®
struct SchemaGenerator {
    tables: Vec<Table>,
}

impl SchemaGenerator {
    fn new() -> Self {
        Self {
            tables: Vec::new(),
        }
    }

    /// ‰ªéÈ°πÁõÆÊ®°ÂûãÂÆö‰πâÁîüÊàêË°®ÁªìÊûÑ
    fn generate_from_models(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        println!("üîç ÂàÜÊûêRustÊ®°ÂûãÊñá‰ª∂...");

        // ËøôÈáåÂ∫îËØ•Ëß£Êûê backend/src/models.rs
        // ‰∏∫‰∫ÜÊºîÁ§∫ÔºåÊàë‰ª¨ÊâãÂä®ÂÆö‰πâË°®ÁªìÊûÑ
        self.define_core_tables();
        
        Ok(())
    }

    /// ÂÆö‰πâÊ†∏ÂøÉË°®ÔºàÂü∫‰∫é‰Ω†ÁöÑÈ°πÁõÆÈúÄÊ±ÇÔºâ
    fn define_core_tables(&mut self) {
        // UsersË°®
        let users_table = Table {
            name: "users".to_string(),
            fields: vec![
                Field {
                    name: "id".to_string(),
                    field_type: "INTEGER".to_string(),
                    nullable: false,
                    primary_key: true,
                    unique: false,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "username".to_string(),
                    field_type: "VARCHAR(50)".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: true,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "password_hash".to_string(),
                    field_type: "VARCHAR(255)".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "email".to_string(),
                    field_type: "VARCHAR(100)".to_string(),
                    nullable: true,
                    primary_key: false,
                    unique: true,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "display_name".to_string(),
                    field_type: "VARCHAR(100)".to_string(),
                    nullable: true,
                    primary_key: false,
                    unique: false,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "role".to_string(),
                    field_type: "VARCHAR(20)".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("'staff'".to_string()),
                    foreign_key: None,
                },
                Field {
                    name: "avatar_url".to_string(),
                    field_type: "TEXT".to_string(),
                    nullable: true,
                    primary_key: false,
                    unique: false,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "is_active".to_string(),
                    field_type: "BOOLEAN".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("true".to_string()),
                    foreign_key: None,
                },
                Field {
                    name: "created_at".to_string(),
                    field_type: "DATETIME".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("CURRENT_TIMESTAMP".to_string()),
                    foreign_key: None,
                },
                Field {
                    name: "updated_at".to_string(),
                    field_type: "DATETIME".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("CURRENT_TIMESTAMP".to_string()),
                    foreign_key: None,
                },
            ],
            indexes: vec![
                "CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);".to_string(),
                "CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);".to_string(),
                "CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);".to_string(),
            ],
            triggers: vec![
                r#"CREATE TRIGGER IF NOT EXISTS update_users_timestamp 
                   AFTER UPDATE ON users
                   FOR EACH ROW 
                   BEGIN
                       UPDATE users SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
                   END;"#.to_string(),
            ],
        };
        self.tables.push(users_table);

        // ShopsË°®
        let shops_table = Table {
            name: "shops".to_string(),
            fields: vec![
                Field {
                    name: "id".to_string(),
                    field_type: "INTEGER".to_string(),
                    nullable: false,
                    primary_key: true,
                    unique: false,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "name".to_string(),
                    field_type: "VARCHAR(100)".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "slug".to_string(),
                    field_type: "VARCHAR(50)".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: true,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "description".to_string(),
                    field_type: "TEXT".to_string(),
                    nullable: true,
                    primary_key: false,
                    unique: false,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "owner_id".to_string(),
                    field_type: "INTEGER".to_string(),
                    nullable: true,
                    primary_key: false,
                    unique: false,
                    default_value: None,
                    foreign_key: Some(("users".to_string(), "id".to_string())),
                },
                Field {
                    name: "is_active".to_string(),
                    field_type: "BOOLEAN".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("true".to_string()),
                    foreign_key: None,
                },
                Field {
                    name: "created_at".to_string(),
                    field_type: "DATETIME".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("CURRENT_TIMESTAMP".to_string()),
                    foreign_key: None,
                },
                Field {
                    name: "updated_at".to_string(),
                    field_type: "DATETIME".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("CURRENT_TIMESTAMP".to_string()),
                    foreign_key: None,
                },
            ],
            indexes: vec![
                "CREATE INDEX IF NOT EXISTS idx_shops_slug ON shops(slug);".to_string(),
                "CREATE INDEX IF NOT EXISTS idx_shops_owner ON shops(owner_id);".to_string(),
            ],
            triggers: vec![],
        };
        self.tables.push(shops_table);

        // shop_staffsË°®ÔºàÈáçË¶ÅÔºÅËøô‰∏™Ë°®‰πãÂâçÁº∫Â§±Ôºâ
        let shop_staffs_table = Table {
            name: "shop_staffs".to_string(),
            fields: vec![
                Field {
                    name: "id".to_string(),
                    field_type: "INTEGER".to_string(),
                    nullable: false,
                    primary_key: true,
                    unique: false,
                    default_value: None,
                    foreign_key: None,
                },
                Field {
                    name: "shop_id".to_string(),
                    field_type: "INTEGER".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: None,
                    foreign_key: Some(("shops".to_string(), "id".to_string())),
                },
                Field {
                    name: "user_id".to_string(),
                    field_type: "INTEGER".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: None,
                    foreign_key: Some(("users".to_string(), "id".to_string())),
                },
                Field {
                    name: "role".to_string(),
                    field_type: "VARCHAR(20)".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("'staff'".to_string()),
                    foreign_key: None,
                },
                Field {
                    name: "is_active".to_string(),
                    field_type: "BOOLEAN".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("true".to_string()),
                    foreign_key: None,
                },
                Field {
                    name: "created_at".to_string(),
                    field_type: "DATETIME".to_string(),
                    nullable: false,
                    primary_key: false,
                    unique: false,
                    default_value: Some("CURRENT_TIMESTAMP".to_string()),
                    foreign_key: None,
                },
            ],
            indexes: vec![
                "CREATE INDEX IF NOT EXISTS idx_shop_staffs_shop ON shop_staffs(shop_id);".to_string(),
                "CREATE INDEX IF NOT EXISTS idx_shop_staffs_user ON shop_staffs(user_id);".to_string(),
            ],
            triggers: vec![],
        };
        self.tables.push(shop_staffs_table);

        println!("‚úÖ ÂÆö‰πâ‰∫Ü {} ‰∏™Ë°®", self.tables.len());
    }

    /// ÁîüÊàêCREATE TABLE SQL
    fn generate_create_table_sql(&self, table: &Table) -> String {
        let mut sql = format!("CREATE TABLE IF NOT EXISTS {} (\n", table.name);
        
        let mut field_definitions = Vec::new();
        let mut constraints = Vec::new();

        for field in &table.fields {
            let mut field_def = format!("    {} {}", field.name, field.field_type);
            
            if field.primary_key {
                field_def.push_str(" PRIMARY KEY AUTOINCREMENT");
            }
            
            if !field.nullable && !field.primary_key {
                field_def.push_str(" NOT NULL");
            }
            
            if field.unique && !field.primary_key {
                field_def.push_str(" UNIQUE");
            }
            
            if let Some(ref default) = field.default_value {
                field_def.push_str(&format!(" DEFAULT {}", default));
            }
            
            field_definitions.push(field_def);
            
            // Â§ñÈîÆÁ∫¶Êùü
            if let Some((ref table_ref, ref column_ref)) = field.foreign_key {
                constraints.push(format!(
                    "    FOREIGN KEY ({}) REFERENCES {}({}) ON DELETE CASCADE",
                    field.name, table_ref, column_ref
                ));
            }
        }

        // Ê∑ªÂä†ÂîØ‰∏ÄÁ∫¶ÊùüÔºàÂ¶ÇÊûúÈúÄË¶ÅÁªÑÂêàÂîØ‰∏ÄÈîÆÔºâ
        if table.name == "shop_staffs" {
            constraints.push("    UNIQUE(shop_id, user_id)".to_string());
        }

        // ÂêàÂπ∂Â≠óÊÆµÂÆö‰πâÂíåÁ∫¶Êùü
        let mut all_definitions = field_definitions;
        all_definitions.extend(constraints);
        
        sql.push_str(&all_definitions.join(",\n"));
        sql.push_str("\n);");
        
        sql
    }

    /// ÁîüÊàêÂÆåÊï¥ÁöÑSQL schema
    fn generate_complete_sql(&self) -> String {
        let mut sql = String::new();
        
        // Êñá‰ª∂Â§¥
        sql.push_str(&format!(
            "-- ==============================================\n\
             -- ELonTalk ÂÆ¢ÊúçÁ≥ªÁªü - Ëá™Âä®ÁîüÊàêÊï∞ÊçÆÂ∫ìÊû∂ÊûÑ\n\
             -- ÁîüÊàêÊó∂Èó¥: {}\n\
             -- ÁîüÊàêÂô®: Rust Schema Generator\n\
             -- ==============================================\n\n\
             -- ÂêØÁî®Â§ñÈîÆÁ∫¶Êùü\n\
             PRAGMA foreign_keys = ON;\n\n",
            chrono::Utc::now().format("%Y-%m-%d %H:%M:%S UTC")
        ));

        // ÁîüÊàêË°®
        for table in &self.tables {
            sql.push_str(&format!(
                "-- ==============================================\n\
                 -- {} Ë°®\n\
                 -- ==============================================\n\n",
                table.name
            ));
            
            sql.push_str(&self.generate_create_table_sql(table));
            sql.push_str("\n\n");
            
            // Ê∑ªÂä†Á¥¢Âºï
            if !table.indexes.is_empty() {
                sql.push_str(&format!("-- {} Ë°®Á¥¢Âºï\n", table.name));
                for index in &table.indexes {
                    sql.push_str(index);
                    sql.push_str("\n");
                }
                sql.push_str("\n");
            }
        }

        // Ê∑ªÂä†Ëß¶ÂèëÂô®
        sql.push_str("-- ==============================================\n");
        sql.push_str("-- Ëß¶ÂèëÂô® (Ëá™Âä®Êõ¥Êñ∞Êó∂Èó¥Êà≥)\n");
        sql.push_str("-- ==============================================\n\n");
        
        for table in &self.tables {
            for trigger in &table.triggers {
                sql.push_str(trigger);
                sql.push_str("\n\n");
            }
        }

        sql
    }

    /// ‰øùÂ≠òÂà∞Êñá‰ª∂
    fn save_to_file(&self, filename: &str) -> Result<(), Box<dyn std::error::Error>> {
        let sql = self.generate_complete_sql();
        fs::write(filename, sql)?;
        println!("‚úÖ SchemaÂ∑≤‰øùÂ≠òÂà∞: {}", filename);
        Ok(())
    }
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("ü¶Ä Rust Schema Generator");
    println!("========================\n");
    
    let mut generator = SchemaGenerator::new();
    
    // ÁîüÊàêschema
    generator.generate_from_models()?;
    
    // ‰øùÂ≠òÂà∞Êñá‰ª∂
    let output_file = "database_schema_generated.sql";
    generator.save_to_file(output_file)?;
    
    // ÁªüËÆ°‰ø°ÊÅØ
    println!("\nüìä ÁîüÊàêÁªüËÆ°:");
    println!("  üìã Ë°®Êï∞Èáè: {}", generator.tables.len());
    let total_indexes: usize = generator.tables.iter().map(|t| t.indexes.len()).sum();
    println!("  üîç Á¥¢ÂºïÊï∞Èáè: {}", total_indexes);
    let total_triggers: usize = generator.tables.iter().map(|t| t.triggers.len()).sum();
    println!("  ‚ö° Ëß¶ÂèëÂô®Êï∞Èáè: {}", total_triggers);
    
    println!("\nüéâ SchemaÁîüÊàêÂÆåÊàêÔºÅ");
    println!("üí° ÊèêÁ§∫: ‰Ω†ÂèØ‰ª•Êâ©Â±ïËøô‰∏™ÁîüÊàêÂô®Êù•Ëß£ÊûêÁúüÂÆûÁöÑRustÁªìÊûÑ‰Ωì");
    
    Ok(())
}